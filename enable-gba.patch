diff --git a/src/emumaster.pro b/src/emumaster.pro
index 6c04123..45ac882 100644
--- a/src/emumaster.pro
+++ b/src/emumaster.pro
@@ -2,10 +2,9 @@ TEMPLATE = subdirs
 
 SUBDIRS += \
     base \
-	snes \
+	snes gba \
 	diskgallery 
 
-#	gba snes pico \
 # nes gba snes psx amiga pico \
 
 OTHER_FILES += \
diff --git a/src/gba/gba.cpp b/src/gba/gba.cpp
index d13e71a..efdb285 100644
--- a/src/gba/gba.cpp
+++ b/src/gba/gba.cpp
@@ -25,12 +25,14 @@
 #include <base/emuview.h>
 #include <base/pathmanager.h>
 #include <QFile>
-#include <QApplication>
+#include <QGuiApplication>
+#include <QQuickView>
 //#include <qdeclarative.h>
 #include <QSemaphore>
 
 #include <QQuickView>
 #include <QtQml>
+#include <QDebug>
 
 timer_type timer[4];
 
@@ -53,13 +55,14 @@ static GbaThread gbaThread;
 
 GbaEmu gbaEmu;
 
-GbaEmu::GbaEmu() :
-	Emu("gba")
+GbaEmu::GbaEmu(QObject *parent) :
+	Emu("gba", parent)
 {
 }
 
 bool GbaEmu::init(const QString &diskPath, QString *error)
 {
+    qDebug("Initializing GbaEmu.");
 	gpuFrame = QImage(240, 160, QImage::Format_RGB16);
 	setVideoSrcRect(gpuFrame.rect());
 	setFrameRate(60);
@@ -68,8 +71,14 @@ bool GbaEmu::init(const QString &diskPath, QString *error)
 	requestQuit = false;
 
 	*error = loadBios();
-	if (error->isEmpty())
+	if (error->isEmpty()) {
+        qDebug() << "Calling setDisk: " << diskPath;
 		*error = setDisk(diskPath);
+    }
+
+    if (!error->isEmpty()) {
+        qDebug() << "Got error: " << *error;
+    }
 	return error->isEmpty();
 }
 
@@ -144,14 +153,23 @@ QString GbaEmu::loadBios()
 
 QString GbaEmu::setDisk(const QString &path)
 {
+    qDebug("GbaEmu::setDisk");
 	init_gamepak_buffer();
-	if (!gbaMemLoadGamePack(path))
+    qDebug() << "Loading game pack: " << path;
+	if (!gbaMemLoadGamePack(path)) {
+        qDebug("Loading game pack failed.");
 		return tr("Could not load disk");
+    }
+
+    qDebug("Resetting...");
 	reset();
 	skip_next_frame = 1;
 
+    qDebug("Starting gbaThread...");
 	gbaThread.start();
 	consumerSem.acquire();
+
+    qDebug("Leaving GbaEmu::setDisk.");
 	return QString();
 }
 
@@ -341,9 +359,12 @@ int main(int argc, char *argv[])
 	qmlRegisterType<GbaCheats>();
 	qmlRegisterType<GbaGameSharkValidator>("EmuMaster", 1, 0,
 										   "GbaGameSharkValidator");
-	QApplication app(argc, argv);
-	EmuView view(&gbaEmu, argv[1]);
-	return app.exec();
+    
+    QGuiApplication *app = new QGuiApplication(argc, argv);
+    QQuickView *view = new QQuickView();
+
+	EmuView emuView(&gbaEmu, argv[1], view);
+	return app->exec();
 }
 
 void GbaEmu::sl()
diff --git a/src/gba/gba.h b/src/gba/gba.h
index 697cc2a..b77866a 100644
--- a/src/gba/gba.h
+++ b/src/gba/gba.h
@@ -18,6 +18,7 @@
 #define GBAEMU_H
 
 #if defined(__cplusplus)
+#include <base/emu.h>
 #include "common.h"
 #include <QThread>
 
@@ -38,7 +39,7 @@ class GbaEmu : public Emu
 	Q_PROPERTY(QString gamePackMaker READ gamePackMaker CONSTANT)
 	Q_PROPERTY(GbaCheats *cheats READ cheats CONSTANT)
 public:
-	GbaEmu();
+	explicit GbaEmu(QObject *parent = 0);
 
 	bool init(const QString &diskPath, QString *error);
 	void shutdown();
diff --git a/src/gba/mem.cpp b/src/gba/mem.cpp
index daae727..4705e2a 100644
--- a/src/gba/mem.cpp
+++ b/src/gba/mem.cpp
@@ -24,6 +24,7 @@
 #include <base/pathmanager.h>
 #include <base/configuration.h>
 #include <QFile>
+#include <QDebug>
 
 // This table is configured for sequential access on system defaults
 
@@ -2708,6 +2709,8 @@ static QPair<QString, QString> parseLine(QString line, int count)
 
 static void loadConfig()
 {
+    qDebug() << "Trying to load game config for (GamePack- Title,Code,Maker): " << gbaGamePackTitle << "," << gbaGamePackCode << "," << gbaGamePackMaker;
+
 	idle_loop_target_pc = 0xFFFFFFFF;
 	iwram_stack_optimize = 1;
 	bios_rom[0x39] = 0x00;
@@ -2722,45 +2725,71 @@ static void loadConfig()
 		printf("could not load gba_game_config.txt");
 		return;
 	}
+
 	while (!f.atEnd()) {
 		QString line = f.readLine();
 		count++;
 		QPair<QString, QString> vars = parseLine(line, count);
-		if (vars.first != "game_name" || vars.second != gbaGamePackTitle)
+		if (vars.first != "game_name" || vars.second != gbaGamePackTitle) {
 			continue;
+        }
+        qDebug("Found matching title at %i.", count);
 		line = f.readLine();
 		count++;
 		vars = parseLine(line, count);
-		if (vars.first != "game_code" || vars.second != gbaGamePackCode)
+		if (vars.first != "game_code" || vars.second != gbaGamePackCode) {
 			continue;
+        }
+        qDebug("Found matching code at %i.", count);
 		line = f.readLine();
 		count++;
 		vars = parseLine(line, count);
-		if (vars.first == "vender_code" && vars.second == gbaGamePackMaker)
+		if (vars.first == "vender_code" && vars.second == gbaGamePackMaker) {
+            qDebug("Found matching maker at %i.", count);
 			break;
+        }
 	}
+    
+    if (!f.atEnd()) {
+        qDebug("Trying to load config.");
+    }
+
 	while (!f.atEnd()) {
 		QString line = f.readLine();
 		count++;
 		QPair<QString, QString> vars = parseLine(line, count);
-		if (vars.first == "game_name")
+		if (vars.first == "game_name") {
+            qDebug("Found game_name at %i, returning.", count);
 			return;
-		if (vars.first == "idle_loop_eliminate_target")
+        }
+		if (vars.first == "idle_loop_eliminate_target") {
 			idle_loop_target_pc = vars.second.toInt(0, 16);
+            qDebug() << "Set idle_loop_eliminate_target: " << idle_loop_target_pc;
+        }
 		if (vars.first == "translation_gate_target") {
+            qDebug("Got a translation_gate_target.");
 			if(translation_gate_targets < MAX_TRANSLATION_GATES) {
+                qDebug() << "Setting translation_gate_target_pc[" << translation_gate_targets << "] = " << vars.second.toInt(0, 16);
 				translation_gate_target_pc[translation_gate_targets] = vars.second.toInt(0, 16);
 				translation_gate_targets++;
 			}
 		}
-		if (vars.first == "iwram_stack_optimize" && vars.second == "no")
+		if (vars.first == "iwram_stack_optimize" && vars.second == "no") {
+            qDebug("Set iwram_stack_optimize = 0");
 			iwram_stack_optimize = 0;
-		if (vars.first == "flash_rom_type" && vars.second == "128KB")
+        }
+		if (vars.first == "flash_rom_type" && vars.second == "128KB") {
 			flash_device_id = FLASH_DEVICE_MACRONIX_128KB;
-		if (vars.first == "bios_rom_hack_39" && vars.second == "yes")
+            qDebug() << "Set flash_device_id: " << flash_device_id;
+        }
+		if (vars.first == "bios_rom_hack_39" && vars.second == "yes") {
+            qDebug("Applying bios_rom_hack_39.");
 			bios_rom[0x39] = 0xC0;
-		if (vars.first == "bios_rom_hack_2C" && vars.second == "yes")
+        }
+		if (vars.first == "bios_rom_hack_2C" && vars.second == "yes") {
+            qDebug("Applying bios_rom_hack_2C.");
 			bios_rom[0x2C] = 0x02;
+        }
 	}
 }
